<script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
<style type="text/css">
    #mynetwork {
        width: 1000px;
        height: 900px;
        border: 1px solid lightgray;
    }
</style>

<div id="mynetwork"></div>
<button id="resetView" onclick="resetme();">Reset View</button>
<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script type="text/javascript">
    ///AgDisplay/chatHub
    var connection = new signalR.HubConnectionBuilder().withUrl("/AgDisplay/chatHub").build();
    //var url = "https://maps.mvbg.org/agCaller/api/KGNode/retrieveTopNodes/1000";
    var url = "https://localhost:64841/api/KGNode/retrieveTopNodes/1000";
    connection.on("ReceiveMessage", function (user, message) {
        url = "https://localhost:64841/api/KGNode/retrieveNodes/2000/" + encodeURIComponent(String(allNodes[selectedNode].uri))
        //url = "https://maps.mvbg.org/agCaller/api/KGNode/retrieveNodes/2000/" + encodeURIComponent(String(allNodes[selectedNode].uri))
        updateThis();

    });

    connection.start().then(function () {
        //document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    function resetme() {
        url = "https://localhost:64841/api/KGNode/retrieveTopNodes/1000";
       // url = "https://maps.mvbg.org/agCaller/api/KGNode/retrieveTopNodes/1000";
        updateThis();
    }

    var selectedNode;
    var nodes;
    var edges;
    var alldata;
    var network;
    var nodesDataset;
    var allNodes;
    var edgesDataset;
    //var url = "https://maps.mvbg.org/agCaller/api/KGNode/retrieveTopNodes/1000";
     var url = "https://localhost:64841/api/KGNode/retrieveTopNodes/1000";
    var ajax = new XMLHttpRequest();
    ajax.onload = functionName;
    ajax.onerror = errorFunctionName;
    ajax.open("GET", url, true);
    ajax.send();
    function functionName() {
        console.log(this); // log the response
        if (this.status == 200) { // request succeeded

            alldata = JSON.parse(this.response);

            console.log(alldata);
            eval(alldata);

            var highlightActive = false;

            nodesDataset = new vis.DataSet(nodes); // these come from WorldCup2014.js
            edgesDataset = new vis.DataSet(edges); // these come from WorldCup2014.js
            console.log(edges);
            console.log(nodesDataset);
            function redrawAll() {
                var container = document.getElementById('mynetwork');
                var options = {
                    nodes: {
                        shape: 'circle',
                        scaling: {
                            min: 10,
                            max: 150,
                            label: {
                                min: 8,
                                max: 30,
                                drawThreshold: 12,
                                maxVisible: 20
                            }
                        },
                        font: {
                            size: 12,
                            face: 'Tahoma'
                        }
                    },
                    edges: {
                        width: 0.15,
                        color: { inherit: 'from' },
                        smooth: {
                            type: 'continuous',
                            forceDirection: "none"
                        }
                    },
                    physics: {
                        "barnesHut": {
                            "gravitationalConstant": -8600
                        },
                        "minVelocity": 0.75
                    },
                    interaction: {
                        tooltipDelay: 200,
                        hideEdgesOnDrag: true,
                        hideEdgesOnZoom: true,
                        navigationButtons: true,
                        keyboard: true
                    }
                };
                var data = { nodes: nodesDataset, edges: edgesDataset } // Note: data is coming from ./datasources/WorldCup2014.js


                network = new vis.Network(container, data, options);

                // get a JSON object
                allNodes = nodesDataset.get({ returnType: "Object" });

                network.on("click", neighbourhoodHighlight);
                //var url1 = "https://localhost:44360/api/AgEdges";
                //var ajax1 = new XMLHttpRequest();
                //ajax1.onload = getEdges;
                //ajax1.onerror = errorEdges;
                //ajax1.open("GET", url1, true);
                //ajax1.send();



            }
            redrawAll();

        }
        else {
            // handle more HTTP response codes here;
        }


    }

    function updateThis() {
        //ajax.open("GET", url, true);
        // ajax.send();
    }
    function updateDisplay() {
        console.log(this); // log the response
        if (this.status == 200) { // request succeeded

            alldata = JSON.parse(this.response);

            console.log(alldata);
            eval(alldata);

            var highlightActive = false;

            nodesDataset = new vis.DataSet(nodes); // these come from WorldCup2014.js
            edgesDataset = new vis.DataSet(edges); // these come from WorldCup2014.js
            console.log(edges);
            console.log(nodesDataset);
            function redrawAll() {
                var container = document.getElementById('mynetwork');
                var options = {
                    nodes: {
                        shape: 'circle',
                        scaling: {
                            min: 10,
                            max: 150,
                            label: {
                                min: 8,
                                max: 30,
                                drawThreshold: 12,
                                maxVisible: 20
                            }
                        },
                        font: {
                            size: 12,
                            face: 'Tahoma'
                        }
                    },
                    edges: {
                        width: 0.15,
                        color: { inherit: 'from' },
                        smooth: {
                            type: 'continuous'
                        }
                    },
                    physics: {
                        "barnesHut": {
                            "gravitationalConstant": -8600
                        },
                        "minVelocity": 0.75
                    },
                    interaction: {
                        tooltipDelay: 200,
                        hideEdgesOnDrag: true,
                        hideEdgesOnZoom: true,
                        navigationButtons: true,
                        keyboard: true
                    }
                };
                var data = { nodes: nodesDataset, edges: edgesDataset } // Note: data is coming from ./datasources/WorldCup2014.js


                network = new vis.Network(container, data, options);

                // get a JSON object
                allNodes = nodesDataset.get({ returnType: "Object" });

                network.on("click", neighbourhoodHighlight);
                //var url1 = "https://localhost:44360/api/AgEdges";
                //var ajax1 = new XMLHttpRequest();
                //ajax1.onload = getEdges;
                //ajax1.onerror = errorEdges;
                //ajax1.open("GET", url1, true);
                //ajax1.send();



            }
            redrawAll();

        }
        else {
            // handle more HTTP response codes here;
        }
    }

    function neighbourhoodHighlight(params) {

        // if something is selected:
        if (params.nodes.length > 0) {
            highlightActive = true;
            var i, j;
            selectedNode = params.nodes[0];
            var degrees = 2;
            var t = new Date();
            var user = "browser";
            var message = String(allNodes[selectedNode].uri) + "----" + String(allNodes[selectedNode].label);
            connection.invoke("SendMessage", user, message).catch(function (err) {
                return console.error(err);
            });
            // mark all nodes as hard to read.
            for (var nodeId in allNodes) {
                allNodes[nodeId].color = 'rgba(200,200,200,0.5)';
                if (allNodes[nodeId].hiddenLabel === undefined) {
                    allNodes[nodeId].hiddenLabel = allNodes[nodeId].label;
                    ////allNodes[nodeId].label = undefined;
                }
            }
            var connectedNodes = network.getConnectedNodes(selectedNode);
            var allConnectedNodes = [];

            // get the second degree nodes
            for (i = 1; i < degrees; i++) {
                for (j = 0; j < connectedNodes.length; j++) {
                    allConnectedNodes = allConnectedNodes.concat(network.getConnectedNodes(connectedNodes[j]));
                }
            }

            // all second degree nodes get a different color and their label back
            for (i = 0; i < allConnectedNodes.length; i++) {
                allNodes[allConnectedNodes[i]].color = 'rgba(150,150,150,0.75)';
                if (allNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {
                    allNodes[allConnectedNodes[i]].label = allNodes[allConnectedNodes[i]].hiddenLabel;
                    allNodes[allConnectedNodes[i]].hiddenLabel = undefined;
                }
            }

            // all first degree nodes get their own color and their label back
            for (i = 0; i < connectedNodes.length; i++) {
                allNodes[connectedNodes[i]].color = undefined;
                if (allNodes[connectedNodes[i]].hiddenLabel !== undefined) {
                    allNodes[connectedNodes[i]].label = allNodes[connectedNodes[i]].hiddenLabel;
                    // allNodes[connectedNodes[i]].hiddenLabel = undefined;
                }
            }

            // the main node gets its own color and its label back.
            allNodes[selectedNode].color = undefined;
            if (allNodes[selectedNode].hiddenLabel !== undefined) {
                allNodes[selectedNode].label = allNodes[selectedNode].hiddenLabel;
                // allNodes[selectedNode].hiddenLabel = undefined;
            }
        }
        else if (highlightActive === true) {
            // reset all nodes
            for (var nodeId in allNodes) {
                allNodes[nodeId].color = undefined;
                if (allNodes[nodeId].hiddenLabel !== undefined) {
                    allNodes[nodeId].label = allNodes[nodeId].hiddenLabel;
                    allNodes[nodeId].hiddenLabel = undefined;
                }
            }
            highlightActive = false
        }

        // transform the object into an array
        var updateArray = [];
        for (nodeId in allNodes) {
            if (allNodes.hasOwnProperty(nodeId)) {
                updateArray.push(allNodes[nodeId]);
            }
        }
        nodesDataset.update(updateArray);
    }
    function errorFunctionName(e) {
        console.log(this);
        console.error(e);
        // do something with this.status, this.statusText
    }
    function getEdges() {
        console.log(this); // log the response
        if (this.status == 200) { // request succeeded

            edges = JSON.parse(this.response);
            console.log(nodes);
            console.log("part 2");
            console.log(edges);
            var nodes = new vis.DataSet(nodes);

            // create an array with edges
            var edges = new vis.DataSet(edges);
            var container = document.getElementById('mynetwork');
            var data = {
                nodes: nodes,
                edges: edges
            };
            var options = {};
            var network = new vis.Network(container, data, options);
        } else {
            // handle more HTTP response codes here;
        }
    }
    function errorEdges(e) {
        console.log(this);
        console.error(e);
        // do something with this.status, this.statusText
    }
</script>
